{"name":"Luavalidation","tagline":"Validation library for Lua with fluent API and error message handling","body":"# LuaValidation\r\n\r\nValidation library for Lua with fluent API and error message handling inspired\r\nby [Respect\\Validation](https://github.com/Respect/Validation).\r\n\r\n## Instalation\r\n\r\nYou can install it by using [LuaRocks](https://luarocks.org).\r\n\r\n```bash\r\nluarocks install validation\r\n```\r\n\r\n## Usage\r\n\r\nThe fluent API of library follows the same principles of [Respect\\Validation][].\r\n\r\n### Module import\r\n\r\nAfter installing LuaValidation you can simple import it:\r\n\r\n```lua\r\nlocal v = require(\"validation\")\r\n```\r\n\r\n### Chained validation\r\n\r\nIt is possible to use validators in a chain.\r\n\r\n```lua\r\nv.numeric().positive().between(1, 256)\r\n```\r\n\r\n### Validation functions\r\n\r\nThere are more than only one way to perform validation against you data with\r\nLuaValidation:\r\n\r\n- `assert()`\r\n- `check()`\r\n- `validate()`\r\n\r\n#### assert()\r\n\r\nThis function validates the entire chain and produces its message.\r\n\r\n```lua\r\nv.numeric().positive().between(1, 256):assert(0)\r\n```\r\n\r\nThe code above should produce this message:\r\n\r\n```text\r\nSome rules must pass for \"0\"\r\n - \"0\" must be positive\r\n - \"0\" must be between \"1\" and \"256\"\r\n```\r\n\r\n#### check()\r\n\r\nWorks like `assert()` but is produces only the message of the first rule of the\r\nrule which did not pass the validation.\r\n\r\n```lua\r\nv.numeric().positive():check(nil)\r\n```\r\n\r\nThe code above should produce this message:\r\n```text\r\n\"nil\" must be numeric\r\n```\r\n\r\n#### validate()\r\n\r\nThis function returns a boolean value which says if the input is valid or not.\r\n\r\n```lua\r\nif v.equals(\"foo\"):validate(input) then\r\n  -- Do something\r\nend\r\n```\r\n\r\n### Reusable chain\r\n\r\nOnce created, you can reuse your chain anywhere:\r\n\r\n```lua\r\nlocal my_chain = v.numeric().positive().between(1, 256)\r\n\r\nmy_chain:check(first)\r\nmy_chain:check(second)\r\nmy_chain:check(third)\r\n```\r\n\r\n### Custom message handler\r\n\r\nBy default you it uses `error()` as default message handler, but you change this\r\nbehavior by defining a new _messager_ with `v.set_messager()` which accepts a\r\ncallback as an argument.\r\n\r\n```lua\r\nv.set_messager(\r\n    function (message)\r\n        print(\">>>\", message)\r\n    end\r\n)\r\n```\r\n\r\n### Custom messages\r\n\r\nWhen you use `assert()` and `check()`, you can define a custom message for you\r\nmessage:\r\n\r\n```lua\r\nv.numeric():check(nil, {message = \"Something is not right\"})\r\n```\r\n\r\nThe above code produces this message:\r\n\r\n```text\r\nSomething is not right\r\n```\r\n\r\n### Custom names\r\n\r\nWhen you use `assert()` and `check()`, sometimes you just want to name it:\r\n\r\n```lua\r\nv.numeric():check(nil, {name = \"Name\"})\r\n```\r\n\r\nThe above code produces this message:\r\n\r\n```text\r\n\"Name\" must be numeric\r\n```\r\n\r\n## Available rules\r\n\r\n- `absent()`: Checks if the input is `nil`\r\n- `all(...)`: Performs validation of all rules defined on its constructor against the input\r\n- `between(minimum, maximum)`: Checks if the input is between `minimum` and `maximum`\r\n- `dummy(result)`: Performs validation exactly according to what was defined as `result` on its constructor\r\n- `equals(expected)`: Checks if the input is equal to the `expected` value\r\n- `key(key, rule, mandatory)`: Performs validation of `rule` against the value of `key` of the input.\r\n   If `mandatory` is `true` (which is the default value), also checks if the `key` exists in the input.\r\n- `never(rule)`: Performs the reverse validation of the `rule` in the given input\r\n- `number()`: Checks if the input is a number\r\n- `numeric()`: Checks if the input is a numeric value\r\n- `positive()`: Checks if the input is a positive value\r\n- `string()`: Checks if the input is a string\r\n\r\nThere's just a few rules, but soon there will be as much as on [Respect\\Validation][],\r\nif you want to contribute it will be a pleasure for me.\r\n\r\n[Respect\\Validation]: https://github.com/Respect/Validation \"Respect\\Validation\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}